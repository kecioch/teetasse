// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // url      = env("DATABASE_URL")
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Category {
  id    Int    @id @default(autoincrement())
  title String @unique

  // RELATIONS
  subcategories Subcategory[]
}

model Subcategory {
  id    Int    @id @default(autoincrement())
  title String

  // RELATIONS
  categoryId    Int
  category      Category       @relation(fields: [categoryId], references: [id])
  productgroups Productgroup[]

  @@unique([title, categoryId])
}

model Productgroup {
  id          Int      @id @default(autoincrement())
  title       String
  visible     Boolean  @default(true)
  recommended Boolean  @default(false)
  description String   @db.Text
  created     DateTime @default(now())
  features    Json?
  imageIds    String[]
  rating      Decimal  @default(0.0) @db.Decimal(2, 1)

  // RELATIONS
  reviews       Review[]
  products      Product[]
  subcategoryId Int
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
}

model Product {
  id      Int     @id @default(autoincrement())
  title   String
  visible Boolean @default(true)
  stock   Int     @default(0)
  price   Decimal @default(0.00)

  // RELATIONS
  orders         ProductOrder[]
  productgroupId Int
  productgroup   Productgroup   @relation(fields: [productgroupId], references: [id], onDelete: Cascade)
}

model Review {
  id      Int      @id @default(autoincrement())
  rating  Int
  comment String?
  created DateTime @default(now())

  // RELATIONS
  authorId       Int
  author         User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  productgroupId Int
  productgroup   Productgroup @relation(fields: [productgroupId], references: [id], onDelete: Cascade)
}

enum Role {
  CUSTOMER
  STAFF
  ADMIN
}

model User {
  id        Int    @id @default(autoincrement())
  lastName  String
  firstName String
  email     String @unique
  password  String
  role      Role   @default(CUSTOMER)

  // RELATIONS 
  reviews Review[]
  orders  Order[]
  address UserAddress?
}

model UserAddress {
  id     Int    @id @default(autoincrement())
  street String
  nr     String
  zip    String
  city   String

  // RELATIONS
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CustomerInformation {
  id        Int    @id @default(autoincrement())
  lastName  String
  firstName String
  email     String

  // RELATIONS
  orderId Int   @unique
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum DeliveryState {
  IN_PROGRESS
  SHIPPED
  DELIVERED
}

enum PaymentState {
  PENDING
  PAYED
  FAILED
}

enum OrderState {
  IN_PROGRESS
  CANCELED
  COMPLETED
}

model Order {
  id            Int           @id @default(autoincrement())
  deliveryState DeliveryState @default(IN_PROGRESS)
  paymentState  PaymentState  @default(PENDING)
  orderState    OrderState    @default(IN_PROGRESS)
  created       DateTime      @default(now())

  // RELATIONS
  userId          Int?
  user            User?                @relation(fields: [userId], references: [id])
  customerInfo    CustomerInformation?
  products        ProductOrder[]
  deliveryAddress DeliveryAddress?
}

model ProductOrder {
  id       Int @id @default(autoincrement())
  quantity Int

  // RELATIONS
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId])
}

model DeliveryAddress {
  id Int @id @default(autoincrement())

  street String
  nr     String
  zip    String
  city   String

  // RELATIONS
  orderId Int   @unique
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
